{
  "version": 3,
  "sources": ["../../src/github-api.ts", "../../src/scoring-utils.ts", "../../src/main.ts"],
  "sourcesContent": ["import { PRData, PRParseResult } from './types';\n\n/**\n * Parse a GitHub PR URL into its components\n */\nexport function parsePrUrl(url: string): PRParseResult {\n  try {\n    // Handle different URL formats\n    // Example formats:\n    // https://github.com/owner/repo/pull/123\n    // https://github.com/owner/repo/pulls/123\n    const regex = /github\\.com\\/([^\\/]+)\\/([^\\/]+)\\/pulls?\\/(\\d+)/;\n    const match = url.match(regex);\n\n    if (!match) {\n      throw new Error('Invalid GitHub PR URL format');\n    }\n\n    return {\n      owner: match[1],\n      repo: match[2],\n      number: match[3]\n    };\n  } catch (error) {\n    throw new Error(`Could not parse GitHub PR URL: ${error instanceof Error ? error.message : String(error)}`);\n  }\n}\n\n/**\n * Fetch data from GitHub API for a specific PR\n */\nexport async function fetchGitHubData(owner: string, repo: string, prNumber: string, token?: string): Promise<PRData> {\n  const headers: HeadersInit = {\n    'Accept': 'application/vnd.github.v3+json'\n  };\n\n  // Add authorization header if token exists\n  if (token) {\n    headers['Authorization'] = `token ${token}`;\n  }\n\n  // Base GitHub API URL\n  const baseUrl = 'https://api.github.com';\n\n  try {\n    // Fetch PR details\n    const prResponse = await fetch(\n      `${baseUrl}/repos/${owner}/${repo}/pulls/${prNumber}`,\n      { headers }\n    );\n\n    if (!prResponse.ok) {\n      if (prResponse.status === 401 || prResponse.status === 403) {\n        // Handle auth errors\n        throw new Error('Authentication failed. Please provide a valid GitHub token.');\n      } else if (prResponse.status === 404) {\n        throw new Error('PR not found. Check the URL or your access permissions.');\n      } else {\n        throw new Error(`GitHub API error: ${prResponse.status}`);\n      }\n    }\n\n    const prDetails = await prResponse.json();\n\n    // Fetch PR comments\n    const commentsResponse = await fetch(\n      `${baseUrl}/repos/${owner}/${repo}/pulls/${prNumber}/comments`,\n      { headers }\n    );\n\n    if (!commentsResponse.ok) {\n      throw new Error(`Failed to fetch PR comments: ${commentsResponse.status}`);\n    }\n\n    const prComments = await commentsResponse.json();\n\n    // Fetch issue comments\n    const issueCommentsResponse = await fetch(\n      `${baseUrl}/repos/${owner}/${repo}/issues/${prNumber}/comments`,\n      { headers }\n    );\n\n    if (!issueCommentsResponse.ok) {\n      throw new Error(`Failed to fetch issue comments: ${issueCommentsResponse.status}`);\n    }\n\n    const issueComments = await issueCommentsResponse.json();\n\n    return {\n      prDetails,\n      prComments,\n      issueComments\n    };\n  } catch (error) {\n    throw error instanceof Error ? error : new Error(String(error));\n  }\n}\n", "import { CommentScores } from './types';\n\n/**\n * Counts words in a text, excluding code blocks, URLs, etc.\n */\nexport function countWords(text: string): number {\n  // Skip if text is empty\n  if (!text || typeof text !== 'string') return 0;\n\n  // Remove code blocks\n  let cleanedText = text.replace(/```[\\s\\S]*?```/g, '');\n\n  // Remove inline code\n  cleanedText = cleanedText.replace(/`[^`]+`/g, '');\n\n  // Remove URLs\n  cleanedText = cleanedText.replace(/https?:\\/\\/\\S+/g, '');\n\n  // Count words (non-empty strings after splitting by whitespace)\n  return cleanedText.trim().split(/\\s+/).filter(word => word.length > 0).length;\n}\n\n/**\n * Calculates the original score based on power-law (0.85 exponent)\n */\nexport function calculateOriginalScore(wordCount: number): number {\n  return Math.pow(wordCount, 0.85);\n}\n\n/**\n * Calculates the log-adjusted score which balances length\n */\nexport function calculateLogAdjustedScore(wordCount: number): number {\n  return Math.pow(wordCount, 0.85) * (1 / Math.log2(wordCount + 2));\n}\n\n/**\n * Calculates the exponential score which penalizes verbosity\n */\nexport function calculateExponentialScore(wordCount: number): number {\n  return Math.pow(wordCount, 0.85) * Math.exp(-wordCount / 100);\n}\n\n/**\n * Calculates all scoring metrics for a given text\n */\nexport function calculateAllScores(text: string): CommentScores {\n  const wordCount = countWords(text);\n  return {\n    wordCount,\n    original: calculateOriginalScore(wordCount),\n    logAdjusted: calculateLogAdjustedScore(wordCount),\n    exponential: calculateExponentialScore(wordCount)\n  };\n}\n", "import { marked } from 'marked';\nimport { fetchGitHubData, parsePrUrl } from './github-api';\nimport { calculateAllScores } from './scoring-utils';\nimport { CommentScores, GitHubComment, ScoringMetrics } from './types';\n\n// Make marked available globally for markdown rendering\ndeclare global {\n  interface Window {\n    marked: typeof marked;\n  }\n}\n\n// DOM elements\nlet prUrlInput: HTMLInputElement;\nlet analyzeBtn: HTMLButtonElement;\nlet loadingIndicator: HTMLElement;\nlet errorMessage: HTMLElement;\nlet prDetailsElement: HTMLElement;\nlet prTitle: HTMLElement;\nlet prMeta: HTMLElement;\nlet algorithmScores: HTMLElement;\nlet conversation: HTMLElement;\nlet githubToken: string | null = localStorage.getItem('github_token');\n\n// Initialize when DOM is ready\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  // Initialize DOM elements\n  prUrlInput = document.getElementById('pr-url') as HTMLInputElement;\n  analyzeBtn = document.getElementById('analyze-btn') as HTMLButtonElement;\n  loadingIndicator = document.getElementById('loading-indicator') as HTMLElement;\n  errorMessage = document.getElementById('error-message') as HTMLElement;\n  prDetailsElement = document.getElementById('pr-details') as HTMLElement;\n  prTitle = document.querySelector('.pr-title') as HTMLElement;\n  prMeta = document.querySelector('.pr-meta') as HTMLElement;\n  algorithmScores = document.querySelector('.algorithm-scores') as HTMLElement;\n  conversation = document.getElementById('conversation') as HTMLElement;\n\n  // Add event listeners\n  analyzeBtn.addEventListener('click', analyzePR);\n  prUrlInput.addEventListener('keydown', (e: KeyboardEvent) => {\n    if (e.key === 'Enter') analyzePR();\n  });\n\n  // Restore last PR URL if exists\n  const lastPrUrl = localStorage.getItem('last_pr_url');\n  if (lastPrUrl && prUrlInput) {\n    prUrlInput.value = lastPrUrl;\n  }\n});\n\n// Handle GitHub token input\nfunction promptForGitHubToken(): boolean {\n  const token = prompt(\n    'GitHub API requires authentication for better rate limits.\\nPlease enter your GitHub personal access token:',\n    githubToken || ''\n  );\n\n  if (token) {\n    githubToken = token;\n    localStorage.setItem('github_token', token);\n    return true;\n  }\n\n  return false;\n}\n\n// Analyze PR using user input\nasync function analyzePR(): Promise<void> {\n  // Clear previous results\n  clearResults();\n\n  // Show loading state\n  loadingIndicator.classList.remove('hidden');\n  errorMessage.classList.add('hidden');\n\n  // Get PR URL\n  const prUrl = prUrlInput.value.trim();\n  if (!prUrl) {\n    showError('Please enter a GitHub PR URL');\n    return;\n  }\n\n  // Save the URL for future use\n  localStorage.setItem('last_pr_url', prUrl);\n\n  try {\n    // Parse PR URL\n    const { owner, repo, number } = parsePrUrl(prUrl);\n\n    // Try to fetch data\n    let data;\n    try {\n      data = await fetchGitHubData(owner, repo, number, githubToken || undefined);\n    } catch (error) {\n      // If auth error, prompt for token and retry\n      if (error instanceof Error &&\n          error.message.includes('Authentication failed') &&\n          promptForGitHubToken()) {\n        try {\n          data = await fetchGitHubData(owner, repo, number, githubToken || undefined);\n        } catch (retryError) {\n          throw retryError;\n        }\n      } else {\n        throw error;\n      }\n    }\n\n    // Process the data\n    updatePRHeader(data.prDetails);\n    const comments = processComments([...data.prComments, ...data.issueComments]);\n    updateSummary(comments);\n\n    // Show results\n    prDetailsElement.classList.remove('hidden');\n    algorithmScores.classList.remove('hidden');\n\n  } catch (error) {\n    showError(error instanceof Error ? error.message : String(error));\n  } finally {\n    loadingIndicator.classList.add('hidden');\n  }\n}\n\n// Clear previous results\nfunction clearResults(): void {\n  conversation.innerHTML = '';\n  algorithmScores.innerHTML = '';\n  prTitle.textContent = 'Loading PR...';\n  prMeta.textContent = '';\n}\n\n// Display error\nfunction showError(message: string): void {\n  loadingIndicator.classList.add('hidden');\n  errorMessage.classList.remove('hidden');\n  errorMessage.textContent = message;\n}\n\nfunction updatePRHeader(prDetails: any): void {\n  prTitle.textContent = `${prDetails.title} (#${prDetails.number})`;\n  prMeta.textContent = `Created by ${prDetails.user.login} on ${new Date(prDetails.created_at).toLocaleDateString()}`;\n}\n\nfunction processComments(comments: GitHubComment[]): ScoringMetrics {\n  const scores: ScoringMetrics = {\n    original: [],\n    logAdjusted: [],\n    exponential: []\n  };\n\n  comments\n    .sort((a, b) => new Date(a.created_at).getTime() - new Date(b.created_at).getTime())\n    .forEach(comment => {\n      if (!comment.body) return; // Skip comments without body\n\n      const commentScores = calculateAllScores(comment.body);\n      appendCommentToDOM(comment, commentScores);\n      updateScoreSummary(commentScores, scores);\n    });\n\n  return scores;\n}\n\nfunction appendCommentToDOM(comment: GitHubComment, scores: CommentScores): void {\n  const div = document.createElement(\"div\");\n  div.className = \"comment\";\n  div.innerHTML = `\n    <div class=\"comment-header\">\n      <a href=\"${comment.user.html_url}\" class=\"username\">${comment.user.login}</a>\n      <div class=\"timestamp\">\n        ${new Date(comment.created_at).toLocaleString()}\n      </div>\n    </div>\n    <div class=\"comment-body markdown\">\n      ${window.marked.parse(comment.body)}\n    </div>\n    <div class=\"score-info\">\n      <div>Words: ${scores.wordCount}</div>\n      <div>Original Score: ${scores.original.toFixed(2)}</div>\n      <div>Log-Adjusted Score: ${scores.logAdjusted.toFixed(2)}</div>\n      <div>Exponential Score: ${scores.exponential.toFixed(2)}</div>\n    </div>\n  `;\n  conversation.appendChild(div);\n}\n\nfunction updateSummary(scores: ScoringMetrics): void {\n  const totalComments = scores.original.length;\n  if (totalComments === 0) {\n    algorithmScores.innerHTML = '<p>No comments found for this PR.</p>';\n    return;\n  }\n\n  const totalWords = scores.original.reduce((sum, _, idx) => {\n    const commentElement = document.querySelectorAll(\".comment\")[idx];\n    if (!commentElement) return sum;\n\n    const text = commentElement.querySelector(\".score-info\")?.textContent || \"\";\n    const wordMatch = text.match(/Words: (\\d+)/);\n    return sum + (wordMatch ? parseInt(wordMatch[1], 10) : 0);\n  }, 0);\n\n  const avgOriginal = scores.original.reduce((a, b) => a + b, 0) / totalComments;\n  const avgLog = scores.logAdjusted.reduce((a, b) => a + b, 0) / totalComments;\n  const avgExp = scores.exponential.reduce((a, b) => a + b, 0) / totalComments;\n\n  algorithmScores.innerHTML = `\n    <div class=\"algorithm-score\">\n      <h3>Original Score</h3>\n      <p>Average: ${avgOriginal.toFixed(2)}</p>\n    </div>\n    <div class=\"algorithm-score\">\n      <h3>Log-Adjusted Score</h3>\n      <p>Average: ${avgLog.toFixed(2)}</p>\n    </div>\n    <div class=\"algorithm-score\">\n      <h3>Exponential Score</h3>\n      <p>Average: ${avgExp.toFixed(2)}</p>\n    </div>\n    <div class=\"algorithm-score\">\n      <h3>Statistics</h3>\n      <p>Total Comments: ${totalComments}</p>\n      <p>Total Words: ${totalWords}</p>\n      <p>Avg Words/Comment: ${(totalWords / totalComments).toFixed(1)}</p>\n    </div>\n  `;\n}\n\nfunction updateScoreSummary(commentScores: CommentScores, summary: ScoringMetrics): void {\n  summary.original.push(commentScores.original);\n  summary.logAdjusted.push(commentScores.logAdjusted);\n  summary.exponential.push(commentScores.exponential);\n}\n"],
  "mappings": "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",
  "names": []
}
