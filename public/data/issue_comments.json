[
  {
    "url": "https://api.github.com/repos/ubiquity-os-marketplace/command-ask/issues/comments/2452849853",
    "html_url": "https://github.com/ubiquity-os-marketplace/command-ask/pull/31#issuecomment-2452849853",
    "issue_url": "https://api.github.com/repos/ubiquity-os-marketplace/command-ask/issues/31",
    "id": 2452849853,
    "node_id": "IC_kwDOMVbFZ86SM4S9",
    "user": {
      "login": "shiv810",
      "id": 53160903,
      "node_id": "MDQ6VXNlcjUzMTYwOTAz",
      "avatar_url": "https://avatars.githubusercontent.com/u/53160903?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shiv810",
      "html_url": "https://github.com/shiv810",
      "followers_url": "https://api.github.com/users/shiv810/followers",
      "following_url": "https://api.github.com/users/shiv810/following{/other_user}",
      "gists_url": "https://api.github.com/users/shiv810/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shiv810/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shiv810/subscriptions",
      "organizations_url": "https://api.github.com/users/shiv810/orgs",
      "repos_url": "https://api.github.com/users/shiv810/repos",
      "events_url": "https://api.github.com/users/shiv810/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shiv810/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "created_at": "2024-11-02T04:10:05Z",
    "updated_at": "2024-11-02T04:10:05Z",
    "author_association": "MEMBER",
    "body": "QA: \r\n\r\n- [Issue with Data from Discussions](https://github.com/sshivaditya2019/test-public/issues/209#issuecomment-2452802275)\r\n- [Issue with PR Summary](https://github.com/sshivaditya2019/test-public/issues/209#issuecomment-2452815731)\r\n- [Issue with Out of Context Question](https://github.com/sshivaditya2019/test-public/issues/199#issuecomment-2452833490)\r\n- [Issue not being discussed in context](https://github.com/sshivaditya2019/test-public/issues/199#issuecomment-2452800668)\r\n- [Question from Context](https://github.com/sshivaditya2019/test-public/issues/199#issuecomment-2452790193)",
    "reactions": {
      "url": "https://api.github.com/repos/ubiquity-os-marketplace/command-ask/issues/comments/2452849853/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ubiquity-os-marketplace/command-ask/issues/comments/2452951942",
    "html_url": "https://github.com/ubiquity-os-marketplace/command-ask/pull/31#issuecomment-2452951942",
    "issue_url": "https://api.github.com/repos/ubiquity-os-marketplace/command-ask/issues/31",
    "id": 2452951942,
    "node_id": "IC_kwDOMVbFZ86SNROG",
    "user": {
      "login": "Keyrxng",
      "id": 106303466,
      "node_id": "U_kgDOBlYP6g",
      "avatar_url": "https://avatars.githubusercontent.com/u/106303466?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Keyrxng",
      "html_url": "https://github.com/Keyrxng",
      "followers_url": "https://api.github.com/users/Keyrxng/followers",
      "following_url": "https://api.github.com/users/Keyrxng/following{/other_user}",
      "gists_url": "https://api.github.com/users/Keyrxng/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Keyrxng/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Keyrxng/subscriptions",
      "organizations_url": "https://api.github.com/users/Keyrxng/orgs",
      "repos_url": "https://api.github.com/users/Keyrxng/repos",
      "events_url": "https://api.github.com/users/Keyrxng/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Keyrxng/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "created_at": "2024-11-02T10:51:08Z",
    "updated_at": "2024-11-02T10:52:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "I don't think this is the right thing to do. I'm leaving my opinion early on, absorb or ignore it whatever the case may be but:\r\n\r\nRewriting the model prompt doesn't involve taking all of our functions and turning them into LLM tools and have the AI be involved in the collection of the data via parsing comments or fetching diffs or anything like that...\r\n\r\nWe should programmatically obtain all the data, the LLM should not play a part in that at all. It having these tools, in my mind, is a poor decision.\r\n\r\n\r\n---\r\n\r\nIf the intention is to improve the context the AI has by allowing it to custom search context against the GitHub API then clearly embeddings search is the problem as it should have _everything_ that we have on GitHub.",
    "reactions": {
      "url": "https://api.github.com/repos/ubiquity-os-marketplace/command-ask/issues/comments/2452951942/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ubiquity-os-marketplace/command-ask/issues/comments/2452990439",
    "html_url": "https://github.com/ubiquity-os-marketplace/command-ask/pull/31#issuecomment-2452990439",
    "issue_url": "https://api.github.com/repos/ubiquity-os-marketplace/command-ask/issues/31",
    "id": 2452990439,
    "node_id": "IC_kwDOMVbFZ86SNann",
    "user": {
      "login": "shiv810",
      "id": 53160903,
      "node_id": "MDQ6VXNlcjUzMTYwOTAz",
      "avatar_url": "https://avatars.githubusercontent.com/u/53160903?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shiv810",
      "html_url": "https://github.com/shiv810",
      "followers_url": "https://api.github.com/users/shiv810/followers",
      "following_url": "https://api.github.com/users/shiv810/following{/other_user}",
      "gists_url": "https://api.github.com/users/shiv810/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shiv810/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shiv810/subscriptions",
      "organizations_url": "https://api.github.com/users/shiv810/orgs",
      "repos_url": "https://api.github.com/users/shiv810/repos",
      "events_url": "https://api.github.com/users/shiv810/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shiv810/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "created_at": "2024-11-02T13:27:58Z",
    "updated_at": "2024-11-02T13:29:19Z",
    "author_association": "MEMBER",
    "body": "> We should programmatically obtain all the data, the LLM should not play a part in that at all. It having these tools, in my mind, is a poor decision.\r\n> \r\n\r\nThe model is effectively performing the same actions: calling Similar Comments, then Similar Issues, and finally Issue Search. Previously, these tasks would have been executed simultaneously, but now the model processes the data sequentially. If I recall correctly, this was one of your concerns, as the prompt was already pulling in data from multiple tasks, which resulted in the context being cluttered with information from various sources.\r\n\r\nApart from that, this can achieve performance close to o1-mini using just GPT-4o. I believe that would provide significant cost savings.",
    "reactions": {
      "url": "https://api.github.com/repos/ubiquity-os-marketplace/command-ask/issues/comments/2452990439/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ubiquity-os-marketplace/command-ask/issues/comments/2453003698",
    "html_url": "https://github.com/ubiquity-os-marketplace/command-ask/pull/31#issuecomment-2453003698",
    "issue_url": "https://api.github.com/repos/ubiquity-os-marketplace/command-ask/issues/31",
    "id": 2453003698,
    "node_id": "IC_kwDOMVbFZ86SNd2y",
    "user": {
      "login": "Keyrxng",
      "id": 106303466,
      "node_id": "U_kgDOBlYP6g",
      "avatar_url": "https://avatars.githubusercontent.com/u/106303466?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Keyrxng",
      "html_url": "https://github.com/Keyrxng",
      "followers_url": "https://api.github.com/users/Keyrxng/followers",
      "following_url": "https://api.github.com/users/Keyrxng/following{/other_user}",
      "gists_url": "https://api.github.com/users/Keyrxng/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Keyrxng/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Keyrxng/subscriptions",
      "organizations_url": "https://api.github.com/users/Keyrxng/orgs",
      "repos_url": "https://api.github.com/users/Keyrxng/repos",
      "events_url": "https://api.github.com/users/Keyrxng/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Keyrxng/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "created_at": "2024-11-02T14:12:05Z",
    "updated_at": "2024-11-02T14:23:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "> The model's process hasn't changed: it calls Similar Comments, then Similar Issues, and finally Issue Search.\r\n\r\nBut why does it need to do this?\r\n\r\nFrom your description, search should pull in the most relevant context beyond linked issues (with an unlimited fetch depth, a key goal for 0x4007). Now we lack control over linked issue collection, embedding search, etc.\r\n\r\nPreviously, `createCompletion` was the final step, pulling context from recursively fetched linked issues and embedding search results. We then passed this to a `reranker` before feeding it to the LLM. Is the embedding search underperforming in relevance assignment?\r\n\r\nThe LLM's output depends entirely on what we input, which we can control and refine.\r\n\r\n---\r\n\r\nThis PR seems to move the plugin toward an autonomous L2 agent, which was not its intended purpose. If it’s meant to act autonomously, [it should be a separate plugin](https://github.com/ubiquity-os/plugins-wishlist/issues/37). This approach adds opacity to the process, which has already been problematic. While reasoning logs provide insight, this shift is a departure from the plugin’s initial design and is undocumented in the spec or PR about why these changes are suddenly necessary.\r\n\r\n---\r\n\r\nIf this PR was based on [this comment](https://github.com/ubiquity-os/permit-generation/pull/96#issuecomment-2452701101), it doesn’t address that problem. #28 already fixes it. The root issue was missing context and hallucinations due to hashMatching being removed.\r\n\r\nThe relevant issues and fixes are documented in the PR I requested you review. Your PR's changes are a major breaking shift; ideally, we’d merge mine and test in prod first, and if issues persist, then document why handing full control to the LLM is necessary.\r\n\r\nI feel instead of solving the root issue, we've just given the LLM tools to be able pick up where we fall short in terms of A) context fetching B) embeddings search C) prompt engineering.\r\n\r\n---\r\n\r\nThat's my two cents on things but 0x4007 is the boss obviously, I'm just giving my input since I was the go-to for AI features for quite some time and have enough experience building with OpenAI to be confident in what I'm saying. \r\n\r\nI've said before, I ask questions so that I understand the software that's being written so that I can effectively work on that codebase as well as perform review on it. Not out of avg curiosity or 'to learn' per-se but to become effective at fault finding, triage, future features, etc.",
    "reactions": {
      "url": "https://api.github.com/repos/ubiquity-os-marketplace/command-ask/issues/comments/2453003698/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ubiquity-os-marketplace/command-ask/issues/comments/2453026713",
    "html_url": "https://github.com/ubiquity-os-marketplace/command-ask/pull/31#issuecomment-2453026713",
    "issue_url": "https://api.github.com/repos/ubiquity-os-marketplace/command-ask/issues/31",
    "id": 2453026713,
    "node_id": "IC_kwDOMVbFZ86SNjeZ",
    "user": {
      "login": "shiv810",
      "id": 53160903,
      "node_id": "MDQ6VXNlcjUzMTYwOTAz",
      "avatar_url": "https://avatars.githubusercontent.com/u/53160903?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shiv810",
      "html_url": "https://github.com/shiv810",
      "followers_url": "https://api.github.com/users/shiv810/followers",
      "following_url": "https://api.github.com/users/shiv810/following{/other_user}",
      "gists_url": "https://api.github.com/users/shiv810/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shiv810/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shiv810/subscriptions",
      "organizations_url": "https://api.github.com/users/shiv810/orgs",
      "repos_url": "https://api.github.com/users/shiv810/repos",
      "events_url": "https://api.github.com/users/shiv810/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shiv810/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "created_at": "2024-11-02T15:41:34Z",
    "updated_at": "2024-11-02T15:41:34Z",
    "author_association": "MEMBER",
    "body": "> From your description, search should pull in the most relevant context beyond linked issues (with an unlimited fetch depth, a key goal for 0x4007). Now we lack control over linked issue collection, embedding search, etc.\r\n\r\nWe have control over what is passed and what is called. The recursive search is still in place; the main difference is in the execution order. Instead of processing everything at once, the LLM now handles it more sequentially.\r\n\r\n> Previously, `createCompletion` was the final step, pulling context from recursively fetched linked issues and embedding search results. We then passed this to a `reranker` before feeding it to the LLM. Is the embedding search underperforming in relevance assignment?\r\n\r\nThe relevance assignment is functioning as intended. The final step remains `createCompletion`. I’m unclear why you believe the embedding search is problematic; that’s not the case.\r\n\r\n---\r\n\r\n> This PR seems to move the plugin toward an autonomous L2 agent, which was not its intended purpose. If it’s meant to act autonomously, [it should be a separate plugin](https://github.com/ubiquity-os/plugins-wishlist/issues/37). This approach adds opacity to the process, which has already been problematic. While reasoning logs provide insight, this shift is a departure from the plugin’s initial design and is undocumented in the spec or PR about why these changes are suddenly necessary.\r\n\r\nAs I mentioned earlier, we’re aiming to integrate everything retrieved so far into the model’s context window. This ensures the process occurs over multiple calls, allowing the model to prioritize what's essential in each iteration. I’m not sure what you’re referring to, but every tool call is logged, allowing us to see the input given to the model, just like in the previous version.\r\n\r\n---\r\n\r\n> I feel instead of solving the root issue, we've just given the LLM tools to be able pick up where we fall short in terms of A) context fetching B) embeddings search C) prompt engineering.\r\n\r\nIf context fetching or embedding search is an issue, it would be a problem regardless of the approach taken. It’s not productive to place blame solely on the model. Regarding prompt engineering, if the model isn’t receiving pull diffs and ground truths, then improving the prompts is futile, both of which you claim to be fixed by your PR.  Then, I don't see an issue here.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ubiquity-os-marketplace/command-ask/issues/comments/2453026713/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ubiquity-os-marketplace/command-ask/issues/comments/2453037389",
    "html_url": "https://github.com/ubiquity-os-marketplace/command-ask/pull/31#issuecomment-2453037389",
    "issue_url": "https://api.github.com/repos/ubiquity-os-marketplace/command-ask/issues/31",
    "id": 2453037389,
    "node_id": "IC_kwDOMVbFZ86SNmFN",
    "user": {
      "login": "Keyrxng",
      "id": 106303466,
      "node_id": "U_kgDOBlYP6g",
      "avatar_url": "https://avatars.githubusercontent.com/u/106303466?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Keyrxng",
      "html_url": "https://github.com/Keyrxng",
      "followers_url": "https://api.github.com/users/Keyrxng/followers",
      "following_url": "https://api.github.com/users/Keyrxng/following{/other_user}",
      "gists_url": "https://api.github.com/users/Keyrxng/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Keyrxng/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Keyrxng/subscriptions",
      "organizations_url": "https://api.github.com/users/Keyrxng/orgs",
      "repos_url": "https://api.github.com/users/Keyrxng/repos",
      "events_url": "https://api.github.com/users/Keyrxng/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Keyrxng/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "created_at": "2024-11-02T16:18:28Z",
    "updated_at": "2024-11-02T16:18:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "> We have control over what is passed and what is called. The recursive search is still in place; the main difference is in the execution order. Instead of processing everything at once, the LLM now handles it more sequentially.\r\n\r\nNo, now the LLM decides whenever it wants to call a tool, so the gathered data is no longer static which is going to make life much more difficult in evaluating and refining things, yes logs help you see what it thought but now we are having to optimize it's internal reasoning logic as well as the global goal. When we already know what context to fetch A) All linked issues B) relevant embeddings (as per the spec for this feature).\r\n\r\n> As I mentioned earlier, we’re aiming to integrate everything retrieved so far into the model’s context window. This ensures the process occurs over multiple calls, allowing the model to prioritize what's essential in each iteration. I’m not sure what you’re referring to, but every tool call is logged, allowing us to see the input given to the model, just like in the previous version.\r\n\r\nThen we should improve our logic for obtaining context as we can easily benchmark and test that. Starting a loop and allowing the blackbox to take over is going to become a nightmare imo. \r\n\r\nThe LLM should have one job: Take this context we gathered specifically from linked issues and embeddings search, and do what the instruction tells you. It shouldn't have the job of gathering all that data or it has the very real potential to run off endlessly fetching context it thinks is relevant. The search feature and statically linked issues has all the context we could want for, if both of those features work correctly because embeddings cover every comment across the org and task participants don't link to random off-topic issues/prs/repos.\r\n\r\n> I’m unclear why you believe the embedding search is problematic; that’s not the case.\r\n\r\n1. I assume we are assuming a ubiquity DB for production rather than your own? If you are using your DB and Ubiquity is using a production DB then the embeddings won't match exactly unless you are scripting to collect the new comments/tasks etc.\r\n2. We have not established benchmarks or baselines for any of this, which we absolutely should, but I am not saying it's a problem. I'm saying it's a bit of a black box and we need it to be clearer and easier to evaluate.\r\n\r\n> If I recall correctly, this was one of your concerns, as the prompt was already pulling in data from multiple tasks, which resulted in the context being cluttered with information from various sources.\r\n\r\nTo which I suggested using GPT to take the all the data we fetched and embeddings etc, and then create a far more succinct ctx window with the noise removed. I see you implemented a new creation call for something almost similar. I didn't think that giving the LLM full control was the solution to refining our collected context.\r\n\r\n> If context fetching or embedding search is an issue, it would be a problem regardless of the approach taken. It’s not productive to place blame solely on the model. Regarding prompt engineering, if the model isn’t receiving pull diffs and ground truths, then improving the prompts is futile, both of which you claim to be fixed by your PR. Then, I don't see an issue here.\r\n\r\nThat's my point exactly buddy thank you and I'm not blaming anything on the model dude. I'm saying that giving the LLM more freedom to do as it wants via the ability to call tools whenever it deems fit is wrong when there's other issues at play.\r\n\r\nInstead we should refine and improve the two base methods of data collection: A) linked issues (static, never changes once an issue is complete) B) embeddings search (dynamic always as they are updated per org comment, of which Ubiquity has 4 to consider).\r\n\r\nSo before we give full control to an LLM and hope it delivers, let's establish benchmarks and baselines that we can repeat with optimizations or logic/prompt changes.\r\n\r\nI can make a pretty educated guess how we'd create these benchmarks for our use-case but maybe you have some more specific experience or learnings with that sort of thing? Wouldn't this be a much better way to triage and optimize things rather than us taking educated-stabs-in-the-dark at it?",
    "reactions": {
      "url": "https://api.github.com/repos/ubiquity-os-marketplace/command-ask/issues/comments/2453037389/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ubiquity-os-marketplace/command-ask/issues/comments/2453049398",
    "html_url": "https://github.com/ubiquity-os-marketplace/command-ask/pull/31#issuecomment-2453049398",
    "issue_url": "https://api.github.com/repos/ubiquity-os-marketplace/command-ask/issues/31",
    "id": 2453049398,
    "node_id": "IC_kwDOMVbFZ86SNpA2",
    "user": {
      "login": "shiv810",
      "id": 53160903,
      "node_id": "MDQ6VXNlcjUzMTYwOTAz",
      "avatar_url": "https://avatars.githubusercontent.com/u/53160903?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shiv810",
      "html_url": "https://github.com/shiv810",
      "followers_url": "https://api.github.com/users/shiv810/followers",
      "following_url": "https://api.github.com/users/shiv810/following{/other_user}",
      "gists_url": "https://api.github.com/users/shiv810/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shiv810/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shiv810/subscriptions",
      "organizations_url": "https://api.github.com/users/shiv810/orgs",
      "repos_url": "https://api.github.com/users/shiv810/repos",
      "events_url": "https://api.github.com/users/shiv810/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shiv810/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "created_at": "2024-11-02T17:03:57Z",
    "updated_at": "2024-11-02T17:04:59Z",
    "author_association": "MEMBER",
    "body": "> No, now the LLM decides whenever it wants to call a tool, so the gathered data is no longer static which is going to make life much more difficult in evaluating and refining things, yes logs help you see what it thought but now we are having to optimize it's internal reasoning logic as well as the global goal. When we already know what context to fetch A) All linked issues B) relevant embeddings (as per the spec for this feature).\r\n> \r\nI am not sure why you believe it is like this, but that's not quite accurate. The model primarily uses three functions to fetch context, with recursive issue search running independently of parameters, while the other two require specific queries. If you’ve reviewed the logs, you'd see all three methods being called consistently in each run.\r\n\r\n> Then we should improve our logic for obtaining context as we can easily benchmark and test that. Starting a loop and allowing the blackbox to take over is going to become a nightmare imo.\r\n> \r\nI am not sure, why you keep calling this blackbox, but you can easily debug which action/word in the prompt or query is leading to a particular reasoning step and the idea behind choosing a particular tool. \r\n\r\n> The LLM should have one job: Take this context we gathered specifically from linked issues and embeddings search, and do what the instruction tells you. It shouldn't have the job of gathering all that data or it has the very real potential to run off endlessly fetching context it thinks is relevant. The search feature and statically linked issues has all the context we could want for, if both of those features work correctly because embeddings cover every comment across the org and task participants don't link to random off-topic issues/prs/repos.\r\n> \r\nYeah, it does have the potentially to keep fetching context, but then there is the token limit as well. So practically, we won’t run into that issue at all.\r\n> 1. I assume we are assuming a ubiquity DB for production rather than your own? If you are using your DB and Ubiquity is using a production DB then the embeddings won't match exactly unless you are scripting to collect the new comments/tasks etc.\r\n\r\nIt is running, off my DB, which I periodically update with comments and issues across organizations. Is that an issue ?\r\n\r\n> 2. We have not established benchmarks or baselines for any of this, which we absolutely should, but I am not saying it's a problem. I'm saying it's a bit of a black box and we need it to be clearer and easier to evaluate.\r\n> \r\nGood point. We should establish strong retrieval metrics or benchmarks. This will streamline evaluation.\r\n> That's my point exactly buddy thank you and I'm not blaming anything on the model dude. I'm saying that giving the LLM more freedom to do as it wants via the ability to call tools whenever it deems fit is wrong when there's other issues at play.\r\n> \r\nI’m not sure what you mean by this. Reasoning prompts already guide the model’s function calls at the start, according to the prompt, and it's not set up to randomly invoke functions. It’s designed to follow prompts precisely.\r\n\r\n> Instead we should refine and improve the two base methods of data collection: A) linked issues (static, never changes once an issue is complete) B) embeddings search (dynamic always as they are updated per org comment, of which Ubiquity has 4 to consider).\r\n\r\nYeah, it should be refined further, but they are independent of model architecture. With this PR I am trying to accomplish the following things:\r\n-   A more modular approach between context gathering and model processing\r\n-   Sequential data fetching\r\n-   Reducing prompt clutter from unrelated tasks.\r\n\r\nThe other two base methods should be improved regardless of this approach, I don't think that is relevant to be mentioned here.\r\n\r\n> I can make a pretty educated guess how we'd create these benchmarks for our use-case but maybe you have some more specific experience or learnings with that sort of thing? Wouldn't this be a much better way to triage and optimize things rather than us taking educated-stabs-in-the-dark at it?\r\n\r\nWe should have benchmarks for embeddings and optimize them for retrieval process, but even if we do I am not sure what we are benchmarking, we are using off the self embeddings, which are top of the leaderboard (MTEB). We do not have any prompts to optimize, and any distance metric chosen would yield similar results, albeit with slight variations in thresholds.\r\n\r\n---\r\nI appreciate you asking questions and all. But, Please give a moment to read through the code. Tool calling operates differently; it invokes functions based on the provided prompt and any necessary context. To avoid endless function calls or the issues you've mentioned, we have limits and optimizations in place. In summary, you have two main concerns:\r\n\r\n1. Blackbox Approach : This isn’t accurate. The model strictly follows prompts, calling appropriate functions initially, and logging details along the way. It also passes all current test cases.\r\n\r\n2. Improving embedding and context retrieval: Agreed. These enhancements are valuable independently of the model approach chosen.\r\n\r\nLet me know, if there are any other concerns apart from the ones raised above.",
    "reactions": {
      "url": "https://api.github.com/repos/ubiquity-os-marketplace/command-ask/issues/comments/2453049398/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ubiquity-os-marketplace/command-ask/issues/comments/2453056295",
    "html_url": "https://github.com/ubiquity-os-marketplace/command-ask/pull/31#issuecomment-2453056295",
    "issue_url": "https://api.github.com/repos/ubiquity-os-marketplace/command-ask/issues/31",
    "id": 2453056295,
    "node_id": "IC_kwDOMVbFZ86SNqsn",
    "user": {
      "login": "Keyrxng",
      "id": 106303466,
      "node_id": "U_kgDOBlYP6g",
      "avatar_url": "https://avatars.githubusercontent.com/u/106303466?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Keyrxng",
      "html_url": "https://github.com/Keyrxng",
      "followers_url": "https://api.github.com/users/Keyrxng/followers",
      "following_url": "https://api.github.com/users/Keyrxng/following{/other_user}",
      "gists_url": "https://api.github.com/users/Keyrxng/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Keyrxng/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Keyrxng/subscriptions",
      "organizations_url": "https://api.github.com/users/Keyrxng/orgs",
      "repos_url": "https://api.github.com/users/Keyrxng/repos",
      "events_url": "https://api.github.com/users/Keyrxng/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Keyrxng/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "created_at": "2024-11-02T17:31:03Z",
    "updated_at": "2024-11-02T17:32:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "https://platform.openai.com/docs/guides/function-calling#lifecycle\r\n\r\nFeed LLM systemMessage and query > it decides: \"call a tool\" or \"respond\" > repeating until it is satisfised or the tokenLimit is hit.\r\n\r\n> If you’ve reviewed the logs, you'd see all three methods being called consistently in each run.\r\n\r\nYour QA is just the issue the LLM responded on not a link to your runs. I just checked your runs and the last one was a week ago so your logs were inside your worker I assume?\r\n\r\n> I am not sure, why you keep calling this blackbox\r\n\r\nBecause the search results are not logged specifically, we have no idea their influence on responses and we haven't benchmarked or started small and built up to a stable knowledgebase nor do we know how the reranker is actually reranking in terms of input/output. But AI features in general are a blackbox the farther we stray from that the easier it is to dev.\r\n\r\n> So practically, we won’t run into that issue at all.\r\n\r\nThat's a bold assumption without evidence I think.\r\n\r\n> Is that an issue ?\r\n\r\nidk lol, is it? I'd think a prod DB would be best for embeddings gathering then they can actually be reviewed by reviewers and we don't have to run scripts to fill our own DB which you seem to be doing. (I still would but atleast 0x4007 and mentlegen could peep the supabase instance)\r\n\r\n> It’s designed to follow prompts precisely.\r\n\r\nHaven't the issues with things recently alone been enough to show that it doesn't always follow your prompts, that's my concern, all of this logic and realistically it would be perfect so will need optimized again but at that point we are dealing with things that are much harder to quantify and test.\r\n\r\n> With this PR I am trying to accomplish the following things:\r\n\r\n- If the LLM is now responsible for tool calling (data fetching), then context fetching is now embedded into the LLM which is less modular than before\r\n- I don't understand how it's more \"sequential\" when it's using the same fetching fns in the same way like you said. We fetched in sequence of current issue > current linked > additional linked > ..., the llm now just tells us what fns to call?\r\n- Imo that is a real concern that should be addressed for sure you are spot on, but as it's own task and without such a massive breaking change to things before we implement baselines and benchmarks\r\n\r\n\r\n\r\n---\r\n\r\n> I am not sure what we are benchmarking\r\n\r\nI wrote a spec #32 please add to it. Benchmarkings:\r\n\r\n1. Data retrieval: linked (static) & search (dynamic)\r\n2. Response: Test conditions where we evaluate both individually and them with combined context (maybe all we need is search and we can remove static completely? Hopefully actually)\r\n3. Factual accuracy: Of both the returned embeddings and of the answer to the query given the context\r\n\r\nWith our QAs, that's very unstructured and for sure not test conditions but it's a sort of benchmark isn't it? We want to break this down into repeatable and gradable steps independent of each other and then combined and if it can be automated great but probably requires marking a few problematic issues/prs and using those any time we merge a feature to get new updated benchmarks for each step in the process.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ubiquity-os-marketplace/command-ask/issues/comments/2453056295/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ubiquity-os-marketplace/command-ask/issues/comments/2453075447",
    "html_url": "https://github.com/ubiquity-os-marketplace/command-ask/pull/31#issuecomment-2453075447",
    "issue_url": "https://api.github.com/repos/ubiquity-os-marketplace/command-ask/issues/31",
    "id": 2453075447,
    "node_id": "IC_kwDOMVbFZ86SNvX3",
    "user": {
      "login": "Keyrxng",
      "id": 106303466,
      "node_id": "U_kgDOBlYP6g",
      "avatar_url": "https://avatars.githubusercontent.com/u/106303466?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Keyrxng",
      "html_url": "https://github.com/Keyrxng",
      "followers_url": "https://api.github.com/users/Keyrxng/followers",
      "following_url": "https://api.github.com/users/Keyrxng/following{/other_user}",
      "gists_url": "https://api.github.com/users/Keyrxng/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Keyrxng/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Keyrxng/subscriptions",
      "organizations_url": "https://api.github.com/users/Keyrxng/orgs",
      "repos_url": "https://api.github.com/users/Keyrxng/repos",
      "events_url": "https://api.github.com/users/Keyrxng/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Keyrxng/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "created_at": "2024-11-02T18:16:03Z",
    "updated_at": "2024-11-02T18:16:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "tldr; I'm not against giving the LLM full control but first we should effectively benchmarks our core components and then take it from there. An autonomous chatbot would be pretty cool fetching whatever it wants to but we need better foundations first. ",
    "reactions": {
      "url": "https://api.github.com/repos/ubiquity-os-marketplace/command-ask/issues/comments/2453075447/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ubiquity-os-marketplace/command-ask/issues/comments/2453088302",
    "html_url": "https://github.com/ubiquity-os-marketplace/command-ask/pull/31#issuecomment-2453088302",
    "issue_url": "https://api.github.com/repos/ubiquity-os-marketplace/command-ask/issues/31",
    "id": 2453088302,
    "node_id": "IC_kwDOMVbFZ86SNygu",
    "user": {
      "login": "0x4007",
      "id": 4975670,
      "node_id": "MDQ6VXNlcjQ5NzU2NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4975670?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0x4007",
      "html_url": "https://github.com/0x4007",
      "followers_url": "https://api.github.com/users/0x4007/followers",
      "following_url": "https://api.github.com/users/0x4007/following{/other_user}",
      "gists_url": "https://api.github.com/users/0x4007/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0x4007/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0x4007/subscriptions",
      "organizations_url": "https://api.github.com/users/0x4007/orgs",
      "repos_url": "https://api.github.com/users/0x4007/repos",
      "events_url": "https://api.github.com/users/0x4007/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0x4007/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "created_at": "2024-11-02T18:35:58Z",
    "updated_at": "2024-11-02T18:35:58Z",
    "author_association": "MEMBER",
    "body": "@Keyrxng you should let shiv focus on shipping this stuff and we'll address potential future problems iteratively. ",
    "reactions": {
      "url": "https://api.github.com/repos/ubiquity-os-marketplace/command-ask/issues/comments/2453088302/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ubiquity-os-marketplace/command-ask/issues/comments/2453091970",
    "html_url": "https://github.com/ubiquity-os-marketplace/command-ask/pull/31#issuecomment-2453091970",
    "issue_url": "https://api.github.com/repos/ubiquity-os-marketplace/command-ask/issues/31",
    "id": 2453091970,
    "node_id": "IC_kwDOMVbFZ86SNzaC",
    "user": {
      "login": "Keyrxng",
      "id": 106303466,
      "node_id": "U_kgDOBlYP6g",
      "avatar_url": "https://avatars.githubusercontent.com/u/106303466?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Keyrxng",
      "html_url": "https://github.com/Keyrxng",
      "followers_url": "https://api.github.com/users/Keyrxng/followers",
      "following_url": "https://api.github.com/users/Keyrxng/following{/other_user}",
      "gists_url": "https://api.github.com/users/Keyrxng/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Keyrxng/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Keyrxng/subscriptions",
      "organizations_url": "https://api.github.com/users/Keyrxng/orgs",
      "repos_url": "https://api.github.com/users/Keyrxng/repos",
      "events_url": "https://api.github.com/users/Keyrxng/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Keyrxng/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "created_at": "2024-11-02T18:46:23Z",
    "updated_at": "2024-11-02T18:46:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "> @Keyrxng you should let shiv focus on shipping this stuff and we'll address potential future problems iteratively.\r\n\r\nI apologize for intruding, I did based on the fact that #28 should resolve these issues and the review is being avoided for a massive breaking change to the plugin. It would have saved development time had that PR been reviewed and QA'd first.\r\n\r\nI'll stop providing reviews on this plugin as I seem to slow progress and to handle future problems I need to understand what's going on at a deep level so I'll do what I can if I'm asked basically.",
    "reactions": {
      "url": "https://api.github.com/repos/ubiquity-os-marketplace/command-ask/issues/comments/2453091970/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 1,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
